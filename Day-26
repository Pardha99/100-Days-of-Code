Day: 26 / 100
#100daysofcode

ProblemName: Spiral Matrix
ProblemLink: https://leetcode.com/problems/spiral-matrix/description/?source=submission-ac


With the help of @striver Learned how to Solve the it;
YoutubeLink:


Solution:
class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {

        int n = matrix.size();
        int m = matrix[0].size();
        int top = 0, bottom = n-1;
        int left = 0 , right = m-1;

        vector<int> ans;

while(top <= bottom && left <= right){
// TOP
        for(int i =left ;i<= right ;i++){
            ans.emplace_back(matrix[top][i]);
        }
         top++;
//bottom

            for(int i = top; i<= bottom;i++){
                ans.emplace_back(matrix[i][right]);
            }
            right--;

            if(top <= bottom){
                for(int i=right;i >= left ;i--){
                    ans.emplace_back(matrix[bottom][i]);
                }
            }
            bottom--;
            if(left<= right){
                for(int i=bottom;i>=top;i--){
                    ans.emplace_back(matrix[i][left]);
                }
            }
            left++;
}
    return ans;
    }
};


TimeComplexity: O(rows * colums)
SpaceComplexity: O(N) // Extra array created for returning the order of elements
